import React, { useState, useEffect } from "react";
import { Box, Typography, TextField, Button, Avatar, Stack, IconButton, CircularProgress } from "@mui/material";
import styled from "@emotion/styled";
import axios from "axios";
import Swal from "sweetalert2";
import PhotoCamera from "@mui/icons-material/PhotoCamera";
import { useSelector, useDispatch } from "react-redux";
import { isValidPhone, isValidEmail } from "../../redux/validation";
import { updateCustomerProfile } from "../../redux/actions/userAction";

const StyledButton = styled(Button)(({ theme }) => ({
  width: "100%",
  padding: "12px",
  borderRadius: "8px",
  textTransform: "none",
  fontSize: "1rem",
  backgroundColor: theme.palette.primary.main,
  color: theme.palette.primary.contrastText,
  "&:hover": {
    backgroundColor: theme.palette.primary.dark,
  },
  position: "relative",
}));

const Input = styled("input")({
  display: "none",
});

export default function CustomerProfile() {
  const [customer, setCustomer] = useState(null);
  const [editMode, setEditMode] = useState(false);
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    avatar: null,
  });
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const dispatch = useDispatch();

  const reduxCustomer = useSelector((state) => state.account.account.customer);
  const token = useSelector((state) => state.account.account.data);

  useEffect(() => {
    if (reduxCustomer) {
      setCustomer(reduxCustomer);
      setFormData({
        fullName: reduxCustomer.fullName || "",
        email: reduxCustomer.email || "",
        phoneNumber: reduxCustomer.phoneNumber || "",
        avatar: reduxCustomer.avatar || null,
      });
    }
  }, [reduxCustomer]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleAvatarChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setFormData((prev) => ({ ...prev, avatar: file }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError("");
    setSuccess("");
    setIsLoading(true);

    if (!isValidPhone(formData.phoneNumber)) {
      Swal.fire({
        icon: "error",
        title:
          "S·ªë ƒëi·ªán tho·∫°i ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng 0 ho·∫∑c +84, theo sau l√† ƒë·∫ßu s·ªë h·ª£p l·ªá (03, 05, 07, 08, 09) v√† 7 ch·ªØ s·ªë, t·ªïng c·ªông 10 ch·ªØ s·ªë",
        text: "Vui l√≤ng ki·ªÉm tra l·∫°i s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n.",
        confirmButtonText: "OK",
      });
      setIsLoading(false);
      return;
    }

    if (!customer) {
      setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t th√¥ng tin.");
      setIsLoading(false);
      return;
    }

    try {
      const updateData = { phoneNumber: formData.phoneNumber };
      if (customer.accountId) {
        updateData.fullName = formData.fullName;
        updateData.email = formData.email;
      }

      const updateResponse = await axios.put(`http://localhost:9999/api/v1/customers/${customer._id}`, updateData, {
        headers: { Authorization: `Bearer ${token}` },
      });

      let updatedAvatar = customer.avatar;
      if (customer.accountId && formData.avatar && formData.avatar instanceof File) {
        const avatarFormData = new FormData();
        avatarFormData.append("avatar", formData.avatar);
        const avatarResponse = await axios.put(
          `http://localhost:9999/api/v1/customers/${customer._id}/avatar`,
          avatarFormData,
          {
            headers: {
              "Content-Type": "multipart/form-data",
              Authorization: `Bearer ${token}`,
            },
          }
        );
        updatedAvatar = avatarResponse.data.customer.avatar; // L·∫•y URL m·ªõi t·ª´ Cloudinary
      }

      const updatedCustomer = {
        ...customer,
        fullName: customer.accountId ? formData.fullName : customer.fullName,
        phoneNumber: formData.phoneNumber,
        email: updateResponse.data.customer.email,
        avatar: updatedAvatar,
        id: customer._id,
      };

      // Dispatch action ƒë·ªÉ c·∫≠p nh·∫≠t Redux
      dispatch(updateCustomerProfile(updatedCustomer));

      setCustomer(updatedCustomer);
      setSuccess("C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      Swal.fire({
        icon: "success",
        title: "Th√†nh c√¥ng!",
        text: "Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.",
        confirmButtonText: "OK",
      });
      setEditMode(false);
      setIsLoading(false);
    } catch (err) {
      setError(err.response?.data?.message || "C·∫≠p nh·∫≠t th√¥ng tin th·∫•t b·∫°i, vui l√≤ng th·ª≠ l·∫°i.");
      setIsLoading(false);
    }
  };

  if (!customer) {
    return (
      <Box sx={{ p: 3, textAlign: "center" }}>
        <Typography variant="h6" color="primary.main">
          Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin c√° nh√¢n.
        </Typography>
      </Box>
    );
  }

  return (
    <Box sx={{ p: 4, maxWidth: 600, mx: "auto" }}>
      <Typography variant="h4" align="center" gutterBottom color="primary.main">
        Th√¥ng tin c√° nh√¢n
      </Typography>

      {error && (
        <Typography color="error" align="center" sx={{ mb: 2 }}>
          {error}
        </Typography>
      )}
      {success && (
        <Typography color="success.main" align="center" sx={{ mb: 2 }}>
          {success}
        </Typography>
      )}

      {/* Avatar + Upload */}
      <Box sx={{ display: "flex", justifyContent: "center", mb: 3 }}>
        <Stack direction="column" alignItems="center" spacing={1}>
          <Avatar
            src={formData.avatar instanceof File ? URL.createObjectURL(formData.avatar) : formData.avatar || ""}
            alt="Avatar"
            sx={{ width: 120, height: 120 }}
          />
          {editMode && customer.accountId && (
            <label htmlFor="avatar-upload">
              <Input accept="image/*" id="avatar-upload" type="file" onChange={handleAvatarChange} />
              <IconButton color="primary" component="span">
                <PhotoCamera />
              </IconButton>
            </label>
          )}
        </Stack>
      </Box>

      {/* üìù Lu√¥n hi·ªÉn th·ªã form, ch·ªâ kh√°c nhau ·ªü tr·∫°ng th√°i editable hay kh√¥ng */}
      <Box component="form" onSubmit={handleSubmit}>
        <Stack spacing={2}>
          <TextField
            label="H·ªç v√† t√™n"
            name="fullName"
            value={formData.fullName}
            onChange={handleChange}
            fullWidth
            disabled={!editMode || !customer.accountId}
          />
          <TextField
            label="Email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            fullWidth
            disabled={!editMode || !customer.accountId}
            error={editMode && customer.accountId && !isValidEmail(formData.email)}
            helperText={
              editMode && customer.accountId && !isValidEmail(formData.email)
                ? "Email kh√¥ng h·ª£p l·ªá, c·∫ßn Email ch√≠nh x√°c ƒë·ªÉ ùìõùì∏ùì∑ùì∞ùì¶ùì™ùìøùìÆ g·ª≠i c√°c th√¥ng tin nh∆∞ ch·ªçn ph√≤ng, g·ª≠i ho√° ƒë∆°n,..."
                : ""
            }
          />

          <TextField
            label="S·ªë ƒëi·ªán tho·∫°i"
            name="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleChange}
            fullWidth
            disabled={!editMode}
            error={editMode && !isValidPhone(formData.phoneNumber)}
            helperText={
              editMode && !isValidPhone(formData.phoneNumber)
                ? "S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá, n·∫øu sai s·∫Ω kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ OTP"
                : ""
            }
          />

          {editMode ? (
            <Stack direction="row" spacing={2}>
              <StyledButton type="submit" disabled={isLoading}>
                {isLoading ? (
                  <>
                    <span>ƒêang x·ª≠ l√Ω</span>
                    <CircularProgress size={24} style={{ color: "white" }} />
                  </>
                ) : (
                  "L∆∞u thay ƒë·ªïi"
                )}
              </StyledButton>
              <Button
                variant="outlined"
                color="secondary"
                style={{ height: "52px" }}
                onClick={() => {
                  setEditMode(false);
                  setFormData({
                    fullName: customer.fullName || "",
                    email: customer.email || "",
                    phoneNumber: customer.phoneNumber || "",
                    avatar: customer.avatar || null,
                  });
                  setError("");
                  setSuccess("");
                }}
              >
                H·ªßy
              </Button>
            </Stack>
          ) : (
            <StyledButton onClick={() => setEditMode(true)}>Ch·ªânh s·ª≠a th√¥ng tin</StyledButton>
          )}
        </Stack>
      </Box>

      {/* Th√¥ng b√°o l∆∞u √Ω n·∫øu l√† Google account */}
      {!editMode && !customer.accountId && (
        <Typography variant="body2" color="error" sx={{ fontStyle: "italic", textAlign: "center", mt: 2 }}>
          * ƒê·ªëi v·ªõi ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p b·∫±ng Google, b·∫°n ch·ªâ c√≥ th·ªÉ c·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i. Vi·ªác ch·ªânh s·ª≠a h·ªç t√™n,
          email v√† ·∫£nh ƒë·∫°i di·ªán s·∫Ω kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n v·ªõi th√¥ng tin t·ª´ Google.
        </Typography>
      )}
    </Box>
  );
}
